
groups.google.com
Scoping of let-bound types in PIR
24-31 minutes
Michael Peyton Jones

<michael.peyton-jones@iohk.io>

Jun 5, 2020, 2:58:03 PM6/5/20

to Plutus

Nikos is currently implementing a typechecker for PIR, but we've hit a problem.

Particularly interested in any thoughts from Phil!

# Scoping of let-bound types

In the PIR paper, the typing rules for let-terms are careful to prevent any types which are defined in the let-term from leaking outside their scope. We do this by kind-checking the type of the overall term in the outer context, without the new bindings.

This means that, for example, the following is illegal (using more Haskell-y notation for concision).

let data Bool = True | False

in True

Now this is all well and good: if we have lexically scoped types, then surely they should *not* be able to escape that scope! We've previously observed the connection to existential types, which have a similar property.

And it's not as though we can't write *any* programs, it just means that e.g. the type of the top-level expression can only include primitive and built-in types.

However, some of the programs which we actually compile from Haskell are not well-typed in this regime. The illegal program that I showed above is precisely how we would compile the Haskell expression `True`.

# Possible solutions

I can see a few possible things we could do.

1) Make sure this never happens

This would amount to saying that the top-level type of a Haskell expression that we compile must only contain primitives and built-in types.

This would only be viable if we made `Data` and `()` into builtin types. `()` already is, and I've wanted `Data` to be one for some time.

In fact, the problem with `Data` highlights that we actually rely on a somewhat dodgy assumption. Namely that both the `Data` type which validators expect as an argument, and the `Data` type which validating nodes use to construct those arguments have the same *compiled* representation. This would be *much* nicer if they used a shared builtin type instead.

2) Add some kind of "global" type-let

We could have a special top-level (as Haskell does), such that declarations at that level are in scope in the whole program.

I'm not a huge fan of this approach, since in my opinion one of the nice things about PIR is the way that it makes everything lexically scoped.

2) Replace datatypes with their Scott-encoded versions when they leave scope

I *really* don't think we should do this, since it essentially breaks any abstraction we have over our compilation method, but I include it for completeness.

This is what happens in the *compiled* version of an illegal program. In the example above, the compiled version of the let-term has type `forall r. r -> r -> r`, i.e. the Scott-encoded type of Bool.

3) Somehow allow "escaped" types?

Again, I'm including this for completeness since I can't think of a non-awful suggestion.

----------------

I'm inclined to suggest that we try option 1, although it will be annoying. Any thoughts?

M

-- 

Michael Peyton Jones
Software Engineering Lead | London, UK

Website: www.iohk.io
Skype: michael.s.pj
Twitter: @mpeytonjones
PGP Key ID: 29F64616

Input Output

Twitter Github LinkedIn

This e-mail and any file transmitted with it are confidential and intended solely for the use of the recipient(s) to whom it is addressed. Dissemination, distribution, and/or copying of the transmission by anyone other than the intended recipient(s) is prohibited. If you have received this transmission in error please notify IOHK immediately and delete it from your system. E-mail transmissions cannot be guaranteed to be secure or error free. We do not accept liability for any loss, damage, or error arising from this transmission
Philip Wadler

<wadler@inf.ed.ac.uk>

Jun 5, 2020, 7:50:55 PM6/5/20

to Michael Peyton Jones, Plutus

Absolutely, Option 1 is the way to go. We must provide Data and () as primitive types, usable anywhere, which will deal with the issue you raise about Data. Am I right in thinking that we've moved to validators returning true/false rather than raising an exception to indicate failure to validate? In that case, we also need boolean as a primitive. Go well, -- P

.   \ Philip Wadler, Professor of Theoretical Computer Science,
.   /\ School of Informatics, University of Edinburgh

.  /  \ and Senior Research Fellow, IOHK


Roman Kireev

<roman.kireev@iohk.io>

Jun 6, 2020, 5:10:06 PM6/6/20

to Philip Wadler, Michael Peyton Jones, Plutus

What exactly goes wrong is we allow all definitions bound by a `let` to be visible in its `in`? When we have

let x = foo

in x

it's completely fine, so what goes wrong with scoping data types the same way?

I mean, I take your argument about breaking abstraction, but

1. we don't need to break abstraction on the PIR side as we can treat `True` in `in` as being of opaque `Bool`, bound earlier

2. on the PLC side the type of the returned `True` becomes encoded, so we kind of break abstraction, but do we care given that the final target is Erased Plutus Core anyway?

Or to put it another way, if we didn't have Plutus Core and compiled Plutus IR immediately to Erased Plutus Core, would it make sense to scope data types the way functions are scoped in Plutus IR?

(I agree that having `Data` as a builtin makes sense, though, but that may or may not be an orthogonal question)

    -- 
    You received this message because you are subscribed to the Google Groups "Plutus" group.
    To unsubscribe from this group and stop receiving emails from it, send an email to plutus+unsubscribe@iohk.io.


-- 

Roman Kireev
Functional Compiler Engineer | Voronezh, Russia 
Michael Peyton Jones

<michael.peyton-jones@iohk.io>

Jun 7, 2020, 4:00:46 PM6/7/20

to Roman Kireev, Philip Wadler, Plutus

> Am I right in thinking that we've moved to validators returning true/false rather than raising an exception to indicate failure to validate?

No, we still signal validation failure with evaluation failure (i.e. error), but we hide this from the user and wrap their `Bool`-producing functions to throw an error on `False`.

> What exactly goes wrong is we allow all definitions bound by a `let` to be visible in its `in`?

Perhaps a larger example helps:

let x = (let data Bool = True | False in True) in x

What is the type of `x`?

If I understand your suggestion Roman, you're basically suggesting that we allow references to `Bool` outside its scope (perhaps not explicitly in source code, but implicitly in typechecking). So we wouldn't be able to write a type annotation for `x`, but the typechecker wouldn't throw a fit either.

This feels quite unhygienic to me, although I can't quite see anything that would *break*.

> When we have [value escaping let] it's completely fine, so what goes wrong with scoping data types the same way?

I think the analogy with value bound in let-terms is interesting. In both cases it's still the case that we don't allow the *name* to escape. But we can still allow terms that reference it to escape. Perhaps an appropriate analogy for types would be:

let data Bool = True | False in

let even n = ... in

\x -> if even x then 1 else 0

The returned function uses Bool internally, but that's fine, since the *name* still doesn't escape.

(I agree that there's nothing wrong with the way things are compiled to PLC. But PIR should make sense on its own: imagine implementing an evaluator for PIR directly!)

M
Roman Kireev

<roman.kireev@iohk.io>

Jun 7, 2020, 7:40:21 PM6/7/20

to Michael Peyton Jones, Philip Wadler, Plutus

    If I understand your suggestion Roman, you're basically suggesting that we allow references to `Bool` outside its scope (perhaps not explicitly in source code, but implicitly in typechecking). So we wouldn't be able to write a type annotation for `x`, but the typechecker wouldn't throw a fit either.

Looking at the larger example, I don't think we can express that in PIR as we have to supply a type for `x`?

Agda allows escaped types:

test = True where
  data Bool : Set where
    True False : Bool

That type checks fine, but you can't specify the type of `test`.

My inclination would be to allow escaped types without Scott-encoding things that escape their scope. Since PIR is fully elaborated (unlike Agda), we can't do anything with types (and their inhabitants) escaping their scope anyway apart from having them at the top level, which I think is fine.

Or am I wrong? Do you have an example where a type escapes its scope not at the top level? Even something like

(let data A = A in \f -> f A) (\a -> <...>)

wouldn't work as you have to supply a type for `a`.

There are two reasons why I like the idea of allowing escaped types:

1. I feel like a top level `let data Bool = True | False in True` makes sense

2. It seems, allowing escaped types gives a simpler type checking procedure. How would we forbid escaped types? By type checking the expression that goes after `in` in the extended context and then kind checking the resulting type in the original context? Seems weird. Or how?
Michael Peyton Jones

<michael.peyton-jones@iohk.io>

Jun 8, 2020, 10:30:36 AM6/8/20

to Roman Kireev, Philip Wadler, Plutus

> It seems, allowing escaped types gives a simpler type checking procedure. How would we forbid escaped types? ... kind checking the resulting type in the original context?

Yes exactly. The typing rules in the paper do this. The rule in question looks like this:

G |- T :: *   <other premises>

--------------------------------------

G |- (let ... in x) : T

This is the same thing that people usually do for existential types, which is one of the reasons doing it this way seems sensible to me. (Pierce doesn't have a kinding premise, but instead says that the fact that the new type variable isn't in the context for the final judgement should yield a scoping error of some kind.) Do you think existential type variables should be able to escape too?

> My inclination would be to allow escaped types without Scott-encoding things that escape their scope. Since PIR is fully elaborated (unlike Agda), we can't do anything with types (and their inhabitants) escaping their scope anyway apart from having them at the top level, which I think is fine.

I was about to object that it's hard to actually say what you want in typing rules, because we'd need e.g. an entry in the context so we at least know the kind of the escaped type, but I think I misunderstood. I think what you're saying is:

- Change the typing rules to drop the kinding premise.

- Don't enforce a scoping restriction in the final judgement a la Pierce

The result of this would be that the variable could escape so long as you *never* look at that type again for anything (because the variable isn't in the context, so we'd get a free type variable error if we try). Which more-or-less means it could only be the type of an expression surrounded by some number of let-bindings.

I'm still not a huge fan of this, it feels a bit like allowing an expression with bottom in it that's fine so long as you don't look at it...

M
Philip Wadler

<wadler@inf.ed.ac.uk>

Jun 8, 2020, 10:39:05 AM6/8/20

to Michael Peyton Jones, Roman Kireev, Plutus

Roman,

I fail to be convinced by your arguments. There seems to me something fundamentally wrong with allowing a type to escape the scope in which it is declared. As Michael points out, we are following a long tradition that goes back to existential types. Your only argument against seems to be a vague feeling it would be "simpler", with no concrete advantages.

Go well, -- P

.   \ Philip Wadler, Professor of Theoretical Computer Science,
.   /\ School of Informatics, University of Edinburgh

.  /  \ and Senior Research Fellow, IOHK

Manuel Chakravarty

<manuel.chakravarty@iohk.io>

Jun 8, 2020, 2:09:09 PM6/8/20

to Philip Wadler, Michael Peyton Jones, Plutus
>
> -- 
> You received this message because you are subscribed to the Google Groups "Plutus" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to plutus+unsubscribe@iohk.io.
Roman Kireev

<roman.kireev@iohk.io>

Jun 8, 2020, 2:38:32 PM6/8/20

to Philip Wadler, Michael Peyton Jones, Plutus

That's just my current inclination based on my limited understanding of the way Plutus Tx scripts are constructed and used, not any kind of advice, feel free to ignore.

    Your only argument against seems to be a vague feeling it would be "simpler", with no concrete advantages. 

Yes, extremely bad argument, I take that one back. But it was not my main argument. 

My current understanding is that we're trying to fit a language where a program is a sequence of global type declarations and global/local function declarations into a language where all declarations are local, which makes a correct program like

True

compile to the morally-illegal-but-"working"

let data Bool = True | False

in True

So I proposed a hack that allows us to accept such morally illegal programs as immorally legal and keep everything the way it's been working all this time without anyone thinking that we're doing something nasty here.

In the ideal world my preferred solution would be to make a Plutus IR program (and even a Plutus Core one) reflect the structure of a Haskell program (i.e. to have a sequence of declarations and only accept types at the top level), but that train left the station long ago.

Michael,

so we compile a standalone `True` (with implicitly imported Plutus Tx `Prelude`, I guess) into

let data Bool = True | False

in True

right? `Bool` is a bit of red herring, because it's a built-in type. I guess if the user writes, say, a standalone `Success` (where `Success` is defined as `data Success = Success` and is imported from somewhere as well), then we'll compile that to an equivalent of

let data Success = Success

in Success

How are we going to handle that? Looking at

    This would only be viable if we made `Data` and `()` into builtin types. `()` already is, and I've wanted `Data` to be one for some time.

I feel like the plan is to implicitly turn `Success` into its serialized-to-Data representation once it escapes its scope? Or explicitly by some kind of combinator?

If it's the former. then I like my hack more than yours, but again, just a personal preference. If it's the latter and we force the user to manually inject `Success` into `Data` via a builtin

toData : all a. a -> Data

Then I agree it's much better than introducing hacks into the theory.
Roman Kireev

<roman.kireev@iohk.io>

Jun 8, 2020, 3:12:31 PM6/8/20

to Philip Wadler, Michael Peyton Jones, Plutus

    we force the user to manually inject `Success` into `Data` via a builtin

*via a builtin or in some other way -- doesn't matter as long as it's explicit. 
Michael Peyton Jones

<michael.peyton-jones@iohk.io>

Jun 8, 2020, 3:19:40 PM6/8/20

to Roman Kireev, Philip Wadler, Plutus

> In the ideal world my preferred solution would be to make a Plutus IR program (and even a Plutus Core one) reflect the structure of a Haskell program (i.e. to have a sequence of declarations and only accept types at the top level), but that train left the station long ago.

Not necessarily, we could in principle restructure PIR to require all the type declarations to be at the top level. The nice thing about the current approach is that it makes the dependency order explicit in the nesting so it's easy to compile it down to PLC.

> I feel like the plan is to implicitly turn `Success` into its serialized-to-Data representation once it escapes its scope? Or explicitly by some kind of combinator?

So, if we do make escaping types illegal, we can only handle things which at their top-level use nothing but primitive and built-in types.

What top-level things do we need to handle? Well, essentially just validator scripts. And these always have types like `Data -> ... -> Data -> ()` (in fact the last type doesn't matter). So all we really need to handle is `Data`.

(Users don't see this because we wrap their validators for them to do the conversion from `Data`.)

That means we won't be able to just compile random things, which is annoying, but we can probably live with it.

M
Roman Kireev

<roman.kireev@iohk.io>

Jun 8, 2020, 3:43:50 PM6/8/20

to Michael Peyton Jones, Philip Wadler, Plutus

Ah, so the user will never run into the situation when they enter a type-correct Plutus Tx program that gets rejected by Plutus IR? That can only happen in our own tests (like that `True` example)? Apologies for the noise then, I misunderstood the problem, I thought we'd either reject type-correct code or do strange implicit conversions inside Plutus IR.

    That means we won't be able to just compile random things, which is annoying, but we can probably live with it.

Yeah. We could circumvent that by using existentials: instead of writing `True` we would write `existsBool True` in tests, where

existsBool : Bool -> (all a. a -> r) -> r
existsBool x = \k -> k {Bool} x

which is not very pleasant, but is fine for internal use and it's definitely not worth introducing hacks into the theory, if that never leaks to the user.
Michael Peyton Jones

<michael.peyton-jones@iohk.io>

Jun 8, 2020, 3:45:39 PM6/8/20

to Roman Kireev, Philip Wadler, Plutus

We should think about the error cases and make sure either users can't hit this or we catch it early, but hopefully on the "happy path" at least things will be fine...
Roman Kireev

<roman.kireev@iohk.io>

Jun 9, 2020, 9:11:24 PM6/9/20

to Michael Peyton Jones, Philip Wadler, Plutus
Michael Peyton Jones

<michael.peyton-jones@iohk.io>

Jun 10, 2020, 10:57:15 AM6/10/20

to Roman Kireev, Philip Wadler, Plutus

> So, what would we normalize the Plutus IR program to? Itself. Because the result of the program is a constructor referencing a local data type, so we have to keep the data binding and so we get the original program back. I.e. just like the fully compiled PLC program doesn't evaluate to a constant, the intermediate PIR program doesn't evaluate to a constant either.

Interesting. Note that the compiled PLC program *will* evaluate further, since it will happily instantiate the types to their Scott-encoded versions.

I think that points me at a property we might want for evaluation. Let `compile` be the PIR->PLC compilation function, and `evalPIR` and `evalPLC` be the corresponding evaluators. Then we could have:

    evalPLC(compile(p)) == compile(evalPIR(p))

That is, evaluation commutes with compilation. I think PIR with the restrictive typing rule could have this property, whereas with what you suggest we'd have something weaker:

    evalPLC(compile(p)) = evalPLC(compile(evalPIR(p)))

That is, the result of PIR evaluation is something which can be evaluated further as PLC, but the final result will be the same.

Not sure if this is a big deal or not.

> Well, it doesn't have any type. The type of True is Bool once the latter is added to the metacontext, but the whole program doesn't really have any type.

I honestly don't know how one describes the semantics of languages like Haskell sensibly while dealing with this problem. I suspect you say that the result needs to be interpreted in the same global type context in order for it to make sense. In that frame, the whole program does have a type.

This is the same argument as us saying that, given a global set of builtin types, a program can evaluate to a constant of one of those types. If you don't have the builtin context, then this is nonsense, but we can assume that that's global across evaluation *and* interpreting the results.

> Why can't we use the same strategy for Plutus IR? Type check things inside a program, but don't attempt to find the type of the whole program, because it doesn't have one in the general case.

This would be a little sad, since it breaks one of the nice uniformities of languages like ours: everything is an expression. I think what you suggest amounts to having two kinds of expression, which are a little different.

(I agree that the concrete suggestion you make would work, though.)

M
Roman Kireev

<roman.kireev@iohk.io>

Jun 10, 2020, 1:20:40 PM6/10/20

to Michael Peyton Jones, Philip Wadler, Plutus

    Note that the compiled PLC program *will* evaluate further, since it will happily instantiate the types to their Scott-encoded versions.

"Further" is not particularly well-defined in this context. It is indeed the case that some reductions will happen, but looking at these two programs:

    data Success = MkSuccess in MkSuccess

    /\(r :: *) -> (mkSuccess : r) -> mkSuccess

It's not that one is more "evaluated" than the other. They are both in normal form in their respective languages.

Just nitpicking.

    That is, the result of PIR evaluation is something which can be evaluated further as PLC, but the final result will be the same.

    Not sure if this is a big deal or not.

I don't think that producing syntactically equal programs is too important. We should care about semantics, not syntax.

    I honestly don't know how one describes the semantics of languages like Haskell sensibly while dealing with this problem. I suspect you say that the result needs to be interpreted in the same global type context in order for it to make sense. In that frame, the whole program does have a type.

There's just no result in Haskell. This program:

data Success = MkSuccess
main = return MkSuccess

is accepted by GHC and the "internal" type of `main` is `IO Success`, but clearly the "external" type of this Haskell program is morally `IO_no_argument`. And

main = return (undefined :: Integer)

runs successfully.

    This is the same argument as us saying that, given a global set of builtin types, a program can evaluate to a constant of one of those types. If you don't have the builtin context, then this is nonsense, but we can assume that that's global across evaluation *and* interpreting the results.

Then you shouldn't be able to construct the "implicit"

data Success = MkSuccess
MkSuccess

Plutus Tx program. My suggestion allows us to accept the fact that such programs can be constructed, type checked in Plutus Tx and compiled to Plutus Core sensibly.

    This would be a little sad, since it breaks one of the nice uniformities of languages like ours: everything is an expression. I think what you suggest amounts to having two kinds of expression, which are a little different.

newtype Program = Program Term

Everything is an expression until you need to talk about versions :)

Anyway, either way is fine, feel free to close the PR or update it to mention that we didn't go with this approach in the end and merge.

    You received this message because you are subscribed to the Google Groups "Plutus" group.
    To unsubscribe from this group and stop receiving emails from it, send an email to plutus+unsubscribe@iohk.io.

Roman Kireev
Functional Compiler Engineer | Voronezh, Russia 
Michael Peyton Jones

<michael.peyton-jones@iohk.io>

Jun 10, 2020, 1:42:08 PM6/10/20

to Roman Kireev, Philip Wadler, Plutus

> "Further" is not particularly well-defined in this context. It is indeed the case that some reductions will happen, but looking at these two programs ... It's not that one is more "evaluated" than the other. They are both in normal form in their respective languages.

I don't agree that those two are the right things to compare. The first program actually turns into something with all the types/constructors abstracted out with PLC abstractions. So you need to do some reduction to actually do all those instantiations and applications, which will eventually end up with something like what you wrote.

> Then you shouldn't be able to construct the "implicit... Plutus Tx program

Yes, that's precisely what we're suggesting: ban non-builtin types from appearing in (what Haskell things is) the type of the overall program.

> Everything is an expression until you need to talk about versions

But that applies only at the actual outside layer of our programs, whereas the distinction you're proposing will go all the way down. Maybe it's still fine.

M
Roman Kireev

<roman.kireev@iohk.io>

Jun 10, 2020, 2:06:53 PM6/10/20

to Michael Peyton Jones, Philip Wadler, Plutus

    But that applies only at the actual outside layer of our programs, whereas the distinction you're proposing will go all the way down.

It already implicitly exists in Plutus Tx, so only needs to be added to Plutus IR and only to the type checker. It won't survive compilation to Plutus Core.

And we already have a similar distinction: renamed vs not renamed things. You can't compose renamed things together, you have to handle a whole program differently than any of its subparts (by calling the renamer before starting type checking) etc.

But I agree that not having the distinction is simpler than having it.
Roman Kireev

<roman.kireev@iohk.io>

Jun 10, 2020, 5:49:06 PM6/10/20

to Michael Peyton Jones, Philip Wadler, Plutus

    I don't agree that those two are the right things to compare. The first program actually turns into something with all the types/constructors abstracted out with PLC abstractions. So you need to do some reduction to actually do all those instantiations and applications, which will eventually end up with something like what you wrote.

Yeah, I agreed about the reduction part, I just didn't agree with this wording:

    the compiled PLC program *will* evaluate further

as the final PLC program does not look evaluated any "further" than the original IR one to me. And the fact that some reductions will be needed can be considered the property of a compiler rather than the IR normalizer.

And we generate type redexes when compiling data types to `ifix` stuff.

Anyway, what would your IR evaluator look like to make evaluated

data Success = MkSuccess in

    \(k : all a. a -> all r. r) ->
        k {Success} MkSuccess

compile exactly to

\(k : all a. a -> all r. r) ->
    k {all (r :: *). r -> r} (/\(r :: *) -> (mkSuccess : r) -> mkSuccess)

(in a way that doesn't also make the program we talked about before compile to its fully reduced PLC counterpart)

Or will it be forbidden for a Plutus Tx program to return a function as well?

What if we add a built-in function taking a function and returning something monomorphic? I could hide something compiling to stuff with redexes in that function.
Michael Peyton Jones

<michael.peyton-jones@iohk.io>

Jun 11, 2020, 1:15:33 PM6/11/20

to Roman Kireev, Philip Wadler, Plutus

Okay, I agree that that's an implausible property, especially given the presence of stuff inside functions.

It does seem like *some* property along those lines should hold, however, if we want to say that compiling PIR to PLC preserves evaluation semantics.

But overall I withdraw my argument about the evaluator. I still think it's weird to have expressions which aren't typeable, though.

M

