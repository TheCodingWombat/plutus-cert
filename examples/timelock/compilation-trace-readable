(let
  (nonrec)
  (typebind (tyvardecl ByteString (type)) (con bytestring))
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl
          verifySignature
          (fun (con bytestring) (fun (con bytestring) (fun (con bytestring) Bool)))
        )
        (lam
          arg
          (con bytestring)
          (lam
            arg
            (con bytestring)
            (lam
              arg
              (con bytestring)
              [
                (lam
                  b
                  (con bool)
                  [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                )
                [ [ [ (builtin verifySignature) arg ] arg ] arg ]
              ]
            )
          )
        )
      )
      (let
        (nonrec)
        (typebind (tyvardecl String (type)) (con string))
        (let
          (nonrec)
          (datatypebind
            (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
          )
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl trace (fun (con string) Unit))
              (lam
                arg
                (con string)
                [ (lam b (con unit) Unit) [ (builtin trace) arg ] ]
              )
            )
            (let
              (nonrec)
              (typebind (tyvardecl Integer (type)) (con integer))
              (let
                (nonrec)
                (termbind
                  (strict)
                  (vardecl
                    takeByteString
                    (fun (con integer) (fun (con bytestring) (con bytestring)))
                  )
                  (builtin takeByteString)
                )
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl
                      subtractInteger
                      (fun (con integer) (fun (con integer) (con integer)))
                    )
                    (builtin subtractInteger)
                  )
                  (let
                    (nonrec)
                    (termbind
                      (strict)
                      (vardecl sha3_ (fun (con bytestring) (con bytestring)))
                      (builtin sha3_256)
                    )
                    (let
                      (nonrec)
                      (termbind
                        (strict)
                        (vardecl sha2_ (fun (con bytestring) (con bytestring)))
                        (builtin sha2_256)
                      )
                      (let
                        (nonrec)
                        (termbind
                          (strict)
                          (vardecl
                            remainderInteger
                            (fun (con integer) (fun (con integer) (con integer)))
                          )
                          (builtin remainderInteger)
                        )
                        (let
                          (nonrec)
                          (termbind
                            (strict)
                            (vardecl
                              quotientInteger
                              (fun (con integer) (fun (con integer) (con integer)))
                            )
                            (builtin quotientInteger)
                          )
                          (let
                            (nonrec)
                            (termbind
                              (strict)
                              (vardecl
                                multiplyInteger
                                (fun (con integer) (fun (con integer) (con integer)))
                              )
                              (builtin multiplyInteger)
                            )
                            (let
                              (nonrec)
                              (termbind
                                (strict)
                                (vardecl
                                  modInteger
                                  (fun (con integer) (fun (con integer) (con integer)))
                                )
                                (builtin modInteger)
                              )
                              (let
                                (nonrec)
                                (termbind
                                  (strict)
                                  (vardecl
                                    lessThanInteger
                                    (fun (con integer) (fun (con integer) Bool))
                                  )
                                  (lam
                                    arg
                                    (con integer)
                                    (lam
                                      arg
                                      (con integer)
                                      [
                                        (lam
                                          b
                                          (con bool)
                                          [
                                            [
                                              [
                                                { (builtin ifThenElse) Bool } b
                                              ]
                                              True
                                            ]
                                            False
                                          ]
                                        )
                                        [
                                          [ (builtin lessThanInteger) arg ] arg
                                        ]
                                      ]
                                    )
                                  )
                                )
                                (let
                                  (nonrec)
                                  (termbind
                                    (strict)
                                    (vardecl
                                      lessThanEqInteger
                                      (fun (con integer) (fun (con integer) Bool))
                                    )
                                    (lam
                                      arg
                                      (con integer)
                                      (lam
                                        arg
                                        (con integer)
                                        [
                                          (lam
                                            b
                                            (con bool)
                                            [
                                              [
                                                [
                                                  { (builtin ifThenElse) Bool }
                                                  b
                                                ]
                                                True
                                              ]
                                              False
                                            ]
                                          )
                                          [
                                            [
                                              (builtin lessThanEqualsInteger)
                                              arg
                                            ]
                                            arg
                                          ]
                                        ]
                                      )
                                    )
                                  )
                                  (let
                                    (nonrec)
                                    (termbind
                                      (strict)
                                      (vardecl
                                        lessThanByteString
                                        (fun (con bytestring) (fun (con bytestring) Bool))
                                      )
                                      (lam
                                        arg
                                        (con bytestring)
                                        (lam
                                          arg
                                          (con bytestring)
                                          [
                                            (lam
                                              b
                                              (con bool)
                                              [
                                                [
                                                  [
                                                    {
                                                      (builtin ifThenElse) Bool
                                                    }
                                                    b
                                                  ]
                                                  True
                                                ]
                                                False
                                              ]
                                            )
                                            [
                                              [
                                                (builtin lessThanByteString) arg
                                              ]
                                              arg
                                            ]
                                          ]
                                        )
                                      )
                                    )
                                    (let
                                      (nonrec)
                                      (termbind
                                        (strict)
                                        (vardecl
                                          greaterThanInteger
                                          (fun (con integer) (fun (con integer) Bool))
                                        )
                                        (lam
                                          arg
                                          (con integer)
                                          (lam
                                            arg
                                            (con integer)
                                            [
                                              (lam
                                                b
                                                (con bool)
                                                [
                                                  [
                                                    [
                                                      {
                                                        (builtin ifThenElse)
                                                        Bool
                                                      }
                                                      b
                                                    ]
                                                    True
                                                  ]
                                                  False
                                                ]
                                              )
                                              [
                                                [
                                                  (builtin greaterThanInteger)
                                                  arg
                                                ]
                                                arg
                                              ]
                                            ]
                                          )
                                        )
                                      )
                                      (let
                                        (nonrec)
                                        (termbind
                                          (strict)
                                          (vardecl
                                            greaterThanEqInteger
                                            (fun (con integer) (fun (con integer) Bool))
                                          )
                                          (lam
                                            arg
                                            (con integer)
                                            (lam
                                              arg
                                              (con integer)
                                              [
                                                (lam
                                                  b
                                                  (con bool)
                                                  [
                                                    [
                                                      [
                                                        {
                                                          (builtin ifThenElse)
                                                          Bool
                                                        }
                                                        b
                                                      ]
                                                      True
                                                    ]
                                                    False
                                                  ]
                                                )
                                                [
                                                  [
                                                    (builtin
                                                      greaterThanEqualsInteger
                                                    )
                                                    arg
                                                  ]
                                                  arg
                                                ]
                                              ]
                                            )
                                          )
                                        )
                                        (let
                                          (nonrec)
                                          (termbind
                                            (strict)
                                            (vardecl
                                              greaterThanByteString
                                              (fun (con bytestring) (fun (con bytestring) Bool))
                                            )
                                            (lam
                                              arg
                                              (con bytestring)
                                              (lam
                                                arg
                                                (con bytestring)
                                                [
                                                  (lam
                                                    b
                                                    (con bool)
                                                    [
                                                      [
                                                        [
                                                          {
                                                            (builtin ifThenElse)
                                                            Bool
                                                          }
                                                          b
                                                        ]
                                                        True
                                                      ]
                                                      False
                                                    ]
                                                  )
                                                  [
                                                    [
                                                      (builtin
                                                        greaterThanByteString
                                                      )
                                                      arg
                                                    ]
                                                    arg
                                                  ]
                                                ]
                                              )
                                            )
                                          )
                                          (let
                                            (nonrec)
                                            (termbind
                                              (strict)
                                              (vardecl
                                                error
                                                (all a (type) (fun Unit a))
                                              )
                                              (abs
                                                e
                                                (type)
                                                (lam thunk Unit (error e))
                                              )
                                            )
                                            (let
                                              (nonrec)
                                              (termbind
                                                (strict)
                                                (vardecl
                                                  equalsInteger
                                                  (fun (con integer) (fun (con integer) Bool))
                                                )
                                                (lam
                                                  arg
                                                  (con integer)
                                                  (lam
                                                    arg
                                                    (con integer)
                                                    [
                                                      (lam
                                                        b
                                                        (con bool)
                                                        [
                                                          [
                                                            [
                                                              {
                                                                (builtin
                                                                  ifThenElse
                                                                )
                                                                Bool
                                                              }
                                                              b
                                                            ]
                                                            True
                                                          ]
                                                          False
                                                        ]
                                                      )
                                                      [
                                                        [
                                                          (builtin equalsInteger
                                                          )
                                                          arg
                                                        ]
                                                        arg
                                                      ]
                                                    ]
                                                  )
                                                )
                                              )
                                              (let
                                                (nonrec)
                                                (termbind
                                                  (strict)
                                                  (vardecl
                                                    equalsByteString
                                                    (fun (con bytestring) (fun (con bytestring) Bool))
                                                  )
                                                  (lam
                                                    arg
                                                    (con bytestring)
                                                    (lam
                                                      arg
                                                      (con bytestring)
                                                      [
                                                        (lam
                                                          b
                                                          (con bool)
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    ifThenElse
                                                                  )
                                                                  Bool
                                                                }
                                                                b
                                                              ]
                                                              True
                                                            ]
                                                            False
                                                          ]
                                                        )
                                                        [
                                                          [
                                                            (builtin
                                                              equalsByteString
                                                            )
                                                            arg
                                                          ]
                                                          arg
                                                        ]
                                                      ]
                                                    )
                                                  )
                                                )
                                                (let
                                                  (nonrec)
                                                  (termbind
                                                    (strict)
                                                    (vardecl
                                                      emptyString (con string)
                                                    )
                                                    (con string "")
                                                  )
                                                  (let
                                                    (nonrec)
                                                    (termbind
                                                      (strict)
                                                      (vardecl
                                                        emptyByteString
                                                        (con bytestring)
                                                      )
                                                      (con bytestring #)
                                                    )
                                                    (let
                                                      (nonrec)
                                                      (termbind
                                                        (strict)
                                                        (vardecl
                                                          dropByteString
                                                          (fun (con integer) (fun (con bytestring) (con bytestring)))
                                                        )
                                                        (builtin dropByteString)
                                                      )
                                                      (let
                                                        (nonrec)
                                                        (termbind
                                                          (strict)
                                                          (vardecl
                                                            divideInteger
                                                            (fun (con integer) (fun (con integer) (con integer)))
                                                          )
                                                          (builtin divideInteger
                                                          )
                                                        )
                                                        (let
                                                          (nonrec)
                                                          (termbind
                                                            (strict)
                                                            (vardecl
                                                              concatenate
                                                              (fun (con bytestring) (fun (con bytestring) (con bytestring)))
                                                            )
                                                            (builtin concatenate
                                                            )
                                                          )
                                                          (let
                                                            (nonrec)
                                                            (typebind
                                                              (tyvardecl
                                                                Char (type)
                                                              )
                                                              (con char)
                                                            )
                                                            (let
                                                              (nonrec)
                                                              (termbind
                                                                (strict)
                                                                (vardecl
                                                                  charToString
                                                                  (fun (con char) (con string))
                                                                )
                                                                (builtin
                                                                  charToString
                                                                )
                                                              )
                                                              (let
                                                                (nonrec)
                                                                (termbind
                                                                  (strict)
                                                                  (vardecl
                                                                    appendString
                                                                    (fun (con string) (fun (con string) (con string)))
                                                                  )
                                                                  (builtin
                                                                    append
                                                                  )
                                                                )
                                                                (let
                                                                  (nonrec)
                                                                  (termbind
                                                                    (strict)
                                                                    (vardecl
                                                                      addInteger
                                                                      (fun (con integer) (fun (con integer) (con integer)))
                                                                    )
                                                                    (builtin
                                                                      addInteger
                                                                    )
                                                                  )
                                                                  (let
                                                                    (nonrec)
                                                                    (datatypebind
                                                                      (datatype
                                                                        (tyvardecl
                                                                          EndDate
                                                                          (type)
                                                                        )

                                                                        EndDate_match
                                                                        (vardecl
                                                                          Fixed
                                                                          (fun (con integer) EndDate)
                                                                        )
                                                                        (vardecl
                                                                          Never
                                                                          EndDate
                                                                        )
                                                                      )
                                                                    )
                                                                    (lam
                                                                      ds
                                                                      EndDate
                                                                      (lam
                                                                        ds
                                                                        (con integer)
                                                                        (let
                                                                          (nonrec
                                                                          )
                                                                          (termbind
                                                                            (nonstrict
                                                                            )
                                                                            (vardecl
                                                                              keep
                                                                              Bool
                                                                            )
                                                                            False
                                                                          )
                                                                          (let
                                                                            (nonrec
                                                                            )
                                                                            (termbind
                                                                              (nonstrict
                                                                              )
                                                                              (vardecl
                                                                                wild
                                                                                EndDate
                                                                              )
                                                                              ds
                                                                            )
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      EndDate_match
                                                                                      ds
                                                                                    ]
                                                                                    (fun Unit Bool)
                                                                                  }
                                                                                  (lam
                                                                                    n
                                                                                    (con integer)
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        [
                                                                                          lessThanEqInteger
                                                                                          (let
                                                                                            (nonrec
                                                                                            )
                                                                                            (termbind
                                                                                              (nonstrict
                                                                                              )
                                                                                              (vardecl
                                                                                                floatme
                                                                                                (con integer)
                                                                                              )
                                                                                              (let
                                                                                                (nonrec
                                                                                                )
                                                                                                (termbind
                                                                                                  (nonstrict
                                                                                                  )
                                                                                                  (vardecl
                                                                                                    wild
                                                                                                    Bool
                                                                                                  )
                                                                                                  [
                                                                                                    [
                                                                                                      greaterThanEqInteger
                                                                                                      ds
                                                                                                    ]
                                                                                                    (con
                                                                                                      integer
                                                                                                        0
                                                                                                    )
                                                                                                  ]
                                                                                                )
                                                                                                [
                                                                                                  [
                                                                                                    [
                                                                                                      {
                                                                                                        [
                                                                                                          Bool_match
                                                                                                          [
                                                                                                            [
                                                                                                              greaterThanEqInteger
                                                                                                              ds
                                                                                                            ]
                                                                                                            (con
                                                                                                              integer
                                                                                                                0
                                                                                                            )
                                                                                                          ]
                                                                                                        ]
                                                                                                        (fun Unit (con integer))
                                                                                                      }
                                                                                                      (lam
                                                                                                        thunk
                                                                                                        Unit
                                                                                                        n
                                                                                                      )
                                                                                                    ]
                                                                                                    (lam
                                                                                                      thunk
                                                                                                      Unit
                                                                                                      (con
                                                                                                        integer
                                                                                                          0
                                                                                                      )
                                                                                                    )
                                                                                                  ]
                                                                                                  Unit
                                                                                                ]
                                                                                              )
                                                                                            )
                                                                                            floatme
                                                                                          )
                                                                                        ]
                                                                                        ds
                                                                                      ]
                                                                                    )
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  keep
                                                                                )
                                                                              ]
                                                                              Unit
                                                                            ]
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

PassRename

(let
  (nonrec)
  (typebind (tyvardecl ByteString (type)) (con bytestring))
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl
          verifySignature
          (fun (con bytestring) (fun (con bytestring) (fun (con bytestring) Bool)))
        )
        (lam
          arg
          (con bytestring)
          (lam
            arg
            (con bytestring)
            (lam
              arg
              (con bytestring)
              [
                (lam
                  b
                  (con bool)
                  [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                )
                [ [ [ (builtin verifySignature) arg ] arg ] arg ]
              ]
            )
          )
        )
      )
      (let
        (nonrec)
        (typebind (tyvardecl String (type)) (con string))
        (let
          (nonrec)
          (datatypebind
            (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
          )
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl trace (fun (con string) Unit))
              (lam
                arg
                (con string)
                [ (lam b (con unit) Unit) [ (builtin trace) arg ] ]
              )
            )
            (let
              (nonrec)
              (typebind (tyvardecl Integer (type)) (con integer))
              (let
                (nonrec)
                (termbind
                  (strict)
                  (vardecl
                    takeByteString
                    (fun (con integer) (fun (con bytestring) (con bytestring)))
                  )
                  (builtin takeByteString)
                )
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl
                      subtractInteger
                      (fun (con integer) (fun (con integer) (con integer)))
                    )
                    (builtin subtractInteger)
                  )
                  (let
                    (nonrec)
                    (termbind
                      (strict)
                      (vardecl sha3_ (fun (con bytestring) (con bytestring)))
                      (builtin sha3_256)
                    )
                    (let
                      (nonrec)
                      (termbind
                        (strict)
                        (vardecl sha2_ (fun (con bytestring) (con bytestring)))
                        (builtin sha2_256)
                      )
                      (let
                        (nonrec)
                        (termbind
                          (strict)
                          (vardecl
                            remainderInteger
                            (fun (con integer) (fun (con integer) (con integer)))
                          )
                          (builtin remainderInteger)
                        )
                        (let
                          (nonrec)
                          (termbind
                            (strict)
                            (vardecl
                              quotientInteger
                              (fun (con integer) (fun (con integer) (con integer)))
                            )
                            (builtin quotientInteger)
                          )
                          (let
                            (nonrec)
                            (termbind
                              (strict)
                              (vardecl
                                multiplyInteger
                                (fun (con integer) (fun (con integer) (con integer)))
                              )
                              (builtin multiplyInteger)
                            )
                            (let
                              (nonrec)
                              (termbind
                                (strict)
                                (vardecl
                                  modInteger
                                  (fun (con integer) (fun (con integer) (con integer)))
                                )
                                (builtin modInteger)
                              )
                              (let
                                (nonrec)
                                (termbind
                                  (strict)
                                  (vardecl
                                    lessThanInteger
                                    (fun (con integer) (fun (con integer) Bool))
                                  )
                                  (lam
                                    arg
                                    (con integer)
                                    (lam
                                      arg
                                      (con integer)
                                      [
                                        (lam
                                          b
                                          (con bool)
                                          [
                                            [
                                              [
                                                { (builtin ifThenElse) Bool } b
                                              ]
                                              True
                                            ]
                                            False
                                          ]
                                        )
                                        [
                                          [ (builtin lessThanInteger) arg ] arg
                                        ]
                                      ]
                                    )
                                  )
                                )
                                (let
                                  (nonrec)
                                  (termbind
                                    (strict)
                                    (vardecl
                                      lessThanEqInteger
                                      (fun (con integer) (fun (con integer) Bool))
                                    )
                                    (lam
                                      arg
                                      (con integer)
                                      (lam
                                        arg
                                        (con integer)
                                        [
                                          (lam
                                            b
                                            (con bool)
                                            [
                                              [
                                                [
                                                  { (builtin ifThenElse) Bool }
                                                  b
                                                ]
                                                True
                                              ]
                                              False
                                            ]
                                          )
                                          [
                                            [
                                              (builtin lessThanEqualsInteger)
                                              arg
                                            ]
                                            arg
                                          ]
                                        ]
                                      )
                                    )
                                  )
                                  (let
                                    (nonrec)
                                    (termbind
                                      (strict)
                                      (vardecl
                                        lessThanByteString
                                        (fun (con bytestring) (fun (con bytestring) Bool))
                                      )
                                      (lam
                                        arg
                                        (con bytestring)
                                        (lam
                                          arg
                                          (con bytestring)
                                          [
                                            (lam
                                              b
                                              (con bool)
                                              [
                                                [
                                                  [
                                                    {
                                                      (builtin ifThenElse) Bool
                                                    }
                                                    b
                                                  ]
                                                  True
                                                ]
                                                False
                                              ]
                                            )
                                            [
                                              [
                                                (builtin lessThanByteString) arg
                                              ]
                                              arg
                                            ]
                                          ]
                                        )
                                      )
                                    )
                                    (let
                                      (nonrec)
                                      (termbind
                                        (strict)
                                        (vardecl
                                          greaterThanInteger
                                          (fun (con integer) (fun (con integer) Bool))
                                        )
                                        (lam
                                          arg
                                          (con integer)
                                          (lam
                                            arg
                                            (con integer)
                                            [
                                              (lam
                                                b
                                                (con bool)
                                                [
                                                  [
                                                    [
                                                      {
                                                        (builtin ifThenElse)
                                                        Bool
                                                      }
                                                      b
                                                    ]
                                                    True
                                                  ]
                                                  False
                                                ]
                                              )
                                              [
                                                [
                                                  (builtin greaterThanInteger)
                                                  arg
                                                ]
                                                arg
                                              ]
                                            ]
                                          )
                                        )
                                      )
                                      (let
                                        (nonrec)
                                        (termbind
                                          (strict)
                                          (vardecl
                                            greaterThanEqInteger
                                            (fun (con integer) (fun (con integer) Bool))
                                          )
                                          (lam
                                            arg
                                            (con integer)
                                            (lam
                                              arg
                                              (con integer)
                                              [
                                                (lam
                                                  b
                                                  (con bool)
                                                  [
                                                    [
                                                      [
                                                        {
                                                          (builtin ifThenElse)
                                                          Bool
                                                        }
                                                        b
                                                      ]
                                                      True
                                                    ]
                                                    False
                                                  ]
                                                )
                                                [
                                                  [
                                                    (builtin
                                                      greaterThanEqualsInteger
                                                    )
                                                    arg
                                                  ]
                                                  arg
                                                ]
                                              ]
                                            )
                                          )
                                        )
                                        (let
                                          (nonrec)
                                          (termbind
                                            (strict)
                                            (vardecl
                                              greaterThanByteString
                                              (fun (con bytestring) (fun (con bytestring) Bool))
                                            )
                                            (lam
                                              arg
                                              (con bytestring)
                                              (lam
                                                arg
                                                (con bytestring)
                                                [
                                                  (lam
                                                    b
                                                    (con bool)
                                                    [
                                                      [
                                                        [
                                                          {
                                                            (builtin ifThenElse)
                                                            Bool
                                                          }
                                                          b
                                                        ]
                                                        True
                                                      ]
                                                      False
                                                    ]
                                                  )
                                                  [
                                                    [
                                                      (builtin
                                                        greaterThanByteString
                                                      )
                                                      arg
                                                    ]
                                                    arg
                                                  ]
                                                ]
                                              )
                                            )
                                          )
                                          (let
                                            (nonrec)
                                            (termbind
                                              (strict)
                                              (vardecl
                                                error
                                                (all a (type) (fun Unit a))
                                              )
                                              (abs
                                                e
                                                (type)
                                                (lam thunk Unit (error e))
                                              )
                                            )
                                            (let
                                              (nonrec)
                                              (termbind
                                                (strict)
                                                (vardecl
                                                  equalsInteger
                                                  (fun (con integer) (fun (con integer) Bool))
                                                )
                                                (lam
                                                  arg
                                                  (con integer)
                                                  (lam
                                                    arg
                                                    (con integer)
                                                    [
                                                      (lam
                                                        b
                                                        (con bool)
                                                        [
                                                          [
                                                            [
                                                              {
                                                                (builtin
                                                                  ifThenElse
                                                                )
                                                                Bool
                                                              }
                                                              b
                                                            ]
                                                            True
                                                          ]
                                                          False
                                                        ]
                                                      )
                                                      [
                                                        [
                                                          (builtin equalsInteger
                                                          )
                                                          arg
                                                        ]
                                                        arg
                                                      ]
                                                    ]
                                                  )
                                                )
                                              )
                                              (let
                                                (nonrec)
                                                (termbind
                                                  (strict)
                                                  (vardecl
                                                    equalsByteString
                                                    (fun (con bytestring) (fun (con bytestring) Bool))
                                                  )
                                                  (lam
                                                    arg
                                                    (con bytestring)
                                                    (lam
                                                      arg
                                                      (con bytestring)
                                                      [
                                                        (lam
                                                          b
                                                          (con bool)
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    ifThenElse
                                                                  )
                                                                  Bool
                                                                }
                                                                b
                                                              ]
                                                              True
                                                            ]
                                                            False
                                                          ]
                                                        )
                                                        [
                                                          [
                                                            (builtin
                                                              equalsByteString
                                                            )
                                                            arg
                                                          ]
                                                          arg
                                                        ]
                                                      ]
                                                    )
                                                  )
                                                )
                                                (let
                                                  (nonrec)
                                                  (termbind
                                                    (strict)
                                                    (vardecl
                                                      emptyString (con string)
                                                    )
                                                    (con string "")
                                                  )
                                                  (let
                                                    (nonrec)
                                                    (termbind
                                                      (strict)
                                                      (vardecl
                                                        emptyByteString
                                                        (con bytestring)
                                                      )
                                                      (con bytestring #)
                                                    )
                                                    (let
                                                      (nonrec)
                                                      (termbind
                                                        (strict)
                                                        (vardecl
                                                          dropByteString
                                                          (fun (con integer) (fun (con bytestring) (con bytestring)))
                                                        )
                                                        (builtin dropByteString)
                                                      )
                                                      (let
                                                        (nonrec)
                                                        (termbind
                                                          (strict)
                                                          (vardecl
                                                            divideInteger
                                                            (fun (con integer) (fun (con integer) (con integer)))
                                                          )
                                                          (builtin divideInteger
                                                          )
                                                        )
                                                        (let
                                                          (nonrec)
                                                          (termbind
                                                            (strict)
                                                            (vardecl
                                                              concatenate
                                                              (fun (con bytestring) (fun (con bytestring) (con bytestring)))
                                                            )
                                                            (builtin concatenate
                                                            )
                                                          )
                                                          (let
                                                            (nonrec)
                                                            (typebind
                                                              (tyvardecl
                                                                Char (type)
                                                              )
                                                              (con char)
                                                            )
                                                            (let
                                                              (nonrec)
                                                              (termbind
                                                                (strict)
                                                                (vardecl
                                                                  charToString
                                                                  (fun (con char) (con string))
                                                                )
                                                                (builtin
                                                                  charToString
                                                                )
                                                              )
                                                              (let
                                                                (nonrec)
                                                                (termbind
                                                                  (strict)
                                                                  (vardecl
                                                                    appendString
                                                                    (fun (con string) (fun (con string) (con string)))
                                                                  )
                                                                  (builtin
                                                                    append
                                                                  )
                                                                )
                                                                (let
                                                                  (nonrec)
                                                                  (termbind
                                                                    (strict)
                                                                    (vardecl
                                                                      addInteger
                                                                      (fun (con integer) (fun (con integer) (con integer)))
                                                                    )
                                                                    (builtin
                                                                      addInteger
                                                                    )
                                                                  )
                                                                  (let
                                                                    (nonrec)
                                                                    (datatypebind
                                                                      (datatype
                                                                        (tyvardecl
                                                                          EndDate
                                                                          (type)
                                                                        )

                                                                        EndDate_match
                                                                        (vardecl
                                                                          Fixed
                                                                          (fun (con integer) EndDate)
                                                                        )
                                                                        (vardecl
                                                                          Never
                                                                          EndDate
                                                                        )
                                                                      )
                                                                    )
                                                                    (lam
                                                                      ds
                                                                      EndDate
                                                                      (lam
                                                                        ds
                                                                        (con integer)
                                                                        (let
                                                                          (nonrec
                                                                          )
                                                                          (termbind
                                                                            (nonstrict
                                                                            )
                                                                            (vardecl
                                                                              keep
                                                                              Bool
                                                                            )
                                                                            False
                                                                          )
                                                                          (let
                                                                            (nonrec
                                                                            )
                                                                            (termbind
                                                                              (nonstrict
                                                                              )
                                                                              (vardecl
                                                                                wild
                                                                                EndDate
                                                                              )
                                                                              ds
                                                                            )
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      EndDate_match
                                                                                      ds
                                                                                    ]
                                                                                    (fun Unit Bool)
                                                                                  }
                                                                                  (lam
                                                                                    n
                                                                                    (con integer)
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        [
                                                                                          lessThanEqInteger
                                                                                          (let
                                                                                            (nonrec
                                                                                            )
                                                                                            (termbind
                                                                                              (nonstrict
                                                                                              )
                                                                                              (vardecl
                                                                                                floatme
                                                                                                (con integer)
                                                                                              )
                                                                                              (let
                                                                                                (nonrec
                                                                                                )
                                                                                                (termbind
                                                                                                  (nonstrict
                                                                                                  )
                                                                                                  (vardecl
                                                                                                    wild
                                                                                                    Bool
                                                                                                  )
                                                                                                  [
                                                                                                    [
                                                                                                      greaterThanEqInteger
                                                                                                      ds
                                                                                                    ]
                                                                                                    (con
                                                                                                      integer
                                                                                                        0
                                                                                                    )
                                                                                                  ]
                                                                                                )
                                                                                                [
                                                                                                  [
                                                                                                    [
                                                                                                      {
                                                                                                        [
                                                                                                          Bool_match
                                                                                                          [
                                                                                                            [
                                                                                                              greaterThanEqInteger
                                                                                                              ds
                                                                                                            ]
                                                                                                            (con
                                                                                                              integer
                                                                                                                0
                                                                                                            )
                                                                                                          ]
                                                                                                        ]
                                                                                                        (fun Unit (con integer))
                                                                                                      }
                                                                                                      (lam
                                                                                                        thunk
                                                                                                        Unit
                                                                                                        n
                                                                                                      )
                                                                                                    ]
                                                                                                    (lam
                                                                                                      thunk
                                                                                                      Unit
                                                                                                      (con
                                                                                                        integer
                                                                                                          0
                                                                                                      )
                                                                                                    )
                                                                                                  ]
                                                                                                  Unit
                                                                                                ]
                                                                                              )
                                                                                            )
                                                                                            floatme
                                                                                          )
                                                                                        ]
                                                                                        ds
                                                                                      ]
                                                                                    )
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  keep
                                                                                )
                                                                              ]
                                                                              Unit
                                                                            ]
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

PassTypeCheck

(let
  (nonrec)
  (typebind (tyvardecl ByteString (type)) (con bytestring))
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl
          verifySignature
          (fun (con bytestring) (fun (con bytestring) (fun (con bytestring) Bool)))
        )
        (lam
          arg
          (con bytestring)
          (lam
            arg
            (con bytestring)
            (lam
              arg
              (con bytestring)
              [
                (lam
                  b
                  (con bool)
                  [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                )
                [ [ [ (builtin verifySignature) arg ] arg ] arg ]
              ]
            )
          )
        )
      )
      (let
        (nonrec)
        (typebind (tyvardecl String (type)) (con string))
        (let
          (nonrec)
          (datatypebind
            (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
          )
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl trace (fun (con string) Unit))
              (lam
                arg
                (con string)
                [ (lam b (con unit) Unit) [ (builtin trace) arg ] ]
              )
            )
            (let
              (nonrec)
              (typebind (tyvardecl Integer (type)) (con integer))
              (let
                (nonrec)
                (termbind
                  (strict)
                  (vardecl
                    takeByteString
                    (fun (con integer) (fun (con bytestring) (con bytestring)))
                  )
                  (builtin takeByteString)
                )
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl
                      subtractInteger
                      (fun (con integer) (fun (con integer) (con integer)))
                    )
                    (builtin subtractInteger)
                  )
                  (let
                    (nonrec)
                    (termbind
                      (strict)
                      (vardecl sha3_ (fun (con bytestring) (con bytestring)))
                      (builtin sha3_256)
                    )
                    (let
                      (nonrec)
                      (termbind
                        (strict)
                        (vardecl sha2_ (fun (con bytestring) (con bytestring)))
                        (builtin sha2_256)
                      )
                      (let
                        (nonrec)
                        (termbind
                          (strict)
                          (vardecl
                            remainderInteger
                            (fun (con integer) (fun (con integer) (con integer)))
                          )
                          (builtin remainderInteger)
                        )
                        (let
                          (nonrec)
                          (termbind
                            (strict)
                            (vardecl
                              quotientInteger
                              (fun (con integer) (fun (con integer) (con integer)))
                            )
                            (builtin quotientInteger)
                          )
                          (let
                            (nonrec)
                            (termbind
                              (strict)
                              (vardecl
                                multiplyInteger
                                (fun (con integer) (fun (con integer) (con integer)))
                              )
                              (builtin multiplyInteger)
                            )
                            (let
                              (nonrec)
                              (termbind
                                (strict)
                                (vardecl
                                  modInteger
                                  (fun (con integer) (fun (con integer) (con integer)))
                                )
                                (builtin modInteger)
                              )
                              (let
                                (nonrec)
                                (termbind
                                  (strict)
                                  (vardecl
                                    lessThanInteger
                                    (fun (con integer) (fun (con integer) Bool))
                                  )
                                  (lam
                                    arg
                                    (con integer)
                                    (lam
                                      arg
                                      (con integer)
                                      [
                                        (lam
                                          b
                                          (con bool)
                                          [
                                            [
                                              [
                                                { (builtin ifThenElse) Bool } b
                                              ]
                                              True
                                            ]
                                            False
                                          ]
                                        )
                                        [
                                          [ (builtin lessThanInteger) arg ] arg
                                        ]
                                      ]
                                    )
                                  )
                                )
                                (let
                                  (nonrec)
                                  (termbind
                                    (strict)
                                    (vardecl
                                      lessThanEqInteger
                                      (fun (con integer) (fun (con integer) Bool))
                                    )
                                    (lam
                                      arg
                                      (con integer)
                                      (lam
                                        arg
                                        (con integer)
                                        [
                                          (lam
                                            b
                                            (con bool)
                                            [
                                              [
                                                [
                                                  { (builtin ifThenElse) Bool }
                                                  b
                                                ]
                                                True
                                              ]
                                              False
                                            ]
                                          )
                                          [
                                            [
                                              (builtin lessThanEqualsInteger)
                                              arg
                                            ]
                                            arg
                                          ]
                                        ]
                                      )
                                    )
                                  )
                                  (let
                                    (nonrec)
                                    (termbind
                                      (strict)
                                      (vardecl
                                        lessThanByteString
                                        (fun (con bytestring) (fun (con bytestring) Bool))
                                      )
                                      (lam
                                        arg
                                        (con bytestring)
                                        (lam
                                          arg
                                          (con bytestring)
                                          [
                                            (lam
                                              b
                                              (con bool)
                                              [
                                                [
                                                  [
                                                    {
                                                      (builtin ifThenElse) Bool
                                                    }
                                                    b
                                                  ]
                                                  True
                                                ]
                                                False
                                              ]
                                            )
                                            [
                                              [
                                                (builtin lessThanByteString) arg
                                              ]
                                              arg
                                            ]
                                          ]
                                        )
                                      )
                                    )
                                    (let
                                      (nonrec)
                                      (termbind
                                        (strict)
                                        (vardecl
                                          greaterThanInteger
                                          (fun (con integer) (fun (con integer) Bool))
                                        )
                                        (lam
                                          arg
                                          (con integer)
                                          (lam
                                            arg
                                            (con integer)
                                            [
                                              (lam
                                                b
                                                (con bool)
                                                [
                                                  [
                                                    [
                                                      {
                                                        (builtin ifThenElse)
                                                        Bool
                                                      }
                                                      b
                                                    ]
                                                    True
                                                  ]
                                                  False
                                                ]
                                              )
                                              [
                                                [
                                                  (builtin greaterThanInteger)
                                                  arg
                                                ]
                                                arg
                                              ]
                                            ]
                                          )
                                        )
                                      )
                                      (let
                                        (nonrec)
                                        (termbind
                                          (strict)
                                          (vardecl
                                            greaterThanEqInteger
                                            (fun (con integer) (fun (con integer) Bool))
                                          )
                                          (lam
                                            arg
                                            (con integer)
                                            (lam
                                              arg
                                              (con integer)
                                              [
                                                (lam
                                                  b
                                                  (con bool)
                                                  [
                                                    [
                                                      [
                                                        {
                                                          (builtin ifThenElse)
                                                          Bool
                                                        }
                                                        b
                                                      ]
                                                      True
                                                    ]
                                                    False
                                                  ]
                                                )
                                                [
                                                  [
                                                    (builtin
                                                      greaterThanEqualsInteger
                                                    )
                                                    arg
                                                  ]
                                                  arg
                                                ]
                                              ]
                                            )
                                          )
                                        )
                                        (let
                                          (nonrec)
                                          (termbind
                                            (strict)
                                            (vardecl
                                              greaterThanByteString
                                              (fun (con bytestring) (fun (con bytestring) Bool))
                                            )
                                            (lam
                                              arg
                                              (con bytestring)
                                              (lam
                                                arg
                                                (con bytestring)
                                                [
                                                  (lam
                                                    b
                                                    (con bool)
                                                    [
                                                      [
                                                        [
                                                          {
                                                            (builtin ifThenElse)
                                                            Bool
                                                          }
                                                          b
                                                        ]
                                                        True
                                                      ]
                                                      False
                                                    ]
                                                  )
                                                  [
                                                    [
                                                      (builtin
                                                        greaterThanByteString
                                                      )
                                                      arg
                                                    ]
                                                    arg
                                                  ]
                                                ]
                                              )
                                            )
                                          )
                                          (let
                                            (nonrec)
                                            (termbind
                                              (strict)
                                              (vardecl
                                                error
                                                (all a (type) (fun Unit a))
                                              )
                                              (abs
                                                e
                                                (type)
                                                (lam thunk Unit (error e))
                                              )
                                            )
                                            (let
                                              (nonrec)
                                              (termbind
                                                (strict)
                                                (vardecl
                                                  equalsInteger
                                                  (fun (con integer) (fun (con integer) Bool))
                                                )
                                                (lam
                                                  arg
                                                  (con integer)
                                                  (lam
                                                    arg
                                                    (con integer)
                                                    [
                                                      (lam
                                                        b
                                                        (con bool)
                                                        [
                                                          [
                                                            [
                                                              {
                                                                (builtin
                                                                  ifThenElse
                                                                )
                                                                Bool
                                                              }
                                                              b
                                                            ]
                                                            True
                                                          ]
                                                          False
                                                        ]
                                                      )
                                                      [
                                                        [
                                                          (builtin equalsInteger
                                                          )
                                                          arg
                                                        ]
                                                        arg
                                                      ]
                                                    ]
                                                  )
                                                )
                                              )
                                              (let
                                                (nonrec)
                                                (termbind
                                                  (strict)
                                                  (vardecl
                                                    equalsByteString
                                                    (fun (con bytestring) (fun (con bytestring) Bool))
                                                  )
                                                  (lam
                                                    arg
                                                    (con bytestring)
                                                    (lam
                                                      arg
                                                      (con bytestring)
                                                      [
                                                        (lam
                                                          b
                                                          (con bool)
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    ifThenElse
                                                                  )
                                                                  Bool
                                                                }
                                                                b
                                                              ]
                                                              True
                                                            ]
                                                            False
                                                          ]
                                                        )
                                                        [
                                                          [
                                                            (builtin
                                                              equalsByteString
                                                            )
                                                            arg
                                                          ]
                                                          arg
                                                        ]
                                                      ]
                                                    )
                                                  )
                                                )
                                                (let
                                                  (nonrec)
                                                  (termbind
                                                    (strict)
                                                    (vardecl
                                                      emptyString (con string)
                                                    )
                                                    (con string "")
                                                  )
                                                  (let
                                                    (nonrec)
                                                    (termbind
                                                      (strict)
                                                      (vardecl
                                                        emptyByteString
                                                        (con bytestring)
                                                      )
                                                      (con bytestring #)
                                                    )
                                                    (let
                                                      (nonrec)
                                                      (termbind
                                                        (strict)
                                                        (vardecl
                                                          dropByteString
                                                          (fun (con integer) (fun (con bytestring) (con bytestring)))
                                                        )
                                                        (builtin dropByteString)
                                                      )
                                                      (let
                                                        (nonrec)
                                                        (termbind
                                                          (strict)
                                                          (vardecl
                                                            divideInteger
                                                            (fun (con integer) (fun (con integer) (con integer)))
                                                          )
                                                          (builtin divideInteger
                                                          )
                                                        )
                                                        (let
                                                          (nonrec)
                                                          (termbind
                                                            (strict)
                                                            (vardecl
                                                              concatenate
                                                              (fun (con bytestring) (fun (con bytestring) (con bytestring)))
                                                            )
                                                            (builtin concatenate
                                                            )
                                                          )
                                                          (let
                                                            (nonrec)
                                                            (typebind
                                                              (tyvardecl
                                                                Char (type)
                                                              )
                                                              (con char)
                                                            )
                                                            (let
                                                              (nonrec)
                                                              (termbind
                                                                (strict)
                                                                (vardecl
                                                                  charToString
                                                                  (fun (con char) (con string))
                                                                )
                                                                (builtin
                                                                  charToString
                                                                )
                                                              )
                                                              (let
                                                                (nonrec)
                                                                (termbind
                                                                  (strict)
                                                                  (vardecl
                                                                    appendString
                                                                    (fun (con string) (fun (con string) (con string)))
                                                                  )
                                                                  (builtin
                                                                    append
                                                                  )
                                                                )
                                                                (let
                                                                  (nonrec)
                                                                  (termbind
                                                                    (strict)
                                                                    (vardecl
                                                                      addInteger
                                                                      (fun (con integer) (fun (con integer) (con integer)))
                                                                    )
                                                                    (builtin
                                                                      addInteger
                                                                    )
                                                                  )
                                                                  (let
                                                                    (nonrec)
                                                                    (datatypebind
                                                                      (datatype
                                                                        (tyvardecl
                                                                          EndDate
                                                                          (type)
                                                                        )

                                                                        EndDate_match
                                                                        (vardecl
                                                                          Fixed
                                                                          (fun (con integer) EndDate)
                                                                        )
                                                                        (vardecl
                                                                          Never
                                                                          EndDate
                                                                        )
                                                                      )
                                                                    )
                                                                    (lam
                                                                      ds
                                                                      EndDate
                                                                      (lam
                                                                        ds
                                                                        (con integer)
                                                                        (let
                                                                          (nonrec
                                                                          )
                                                                          (termbind
                                                                            (nonstrict
                                                                            )
                                                                            (vardecl
                                                                              keep
                                                                              Bool
                                                                            )
                                                                            False
                                                                          )
                                                                          (let
                                                                            (nonrec
                                                                            )
                                                                            (termbind
                                                                              (nonstrict
                                                                              )
                                                                              (vardecl
                                                                                wild
                                                                                EndDate
                                                                              )
                                                                              ds
                                                                            )
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      EndDate_match
                                                                                      ds
                                                                                    ]
                                                                                    (fun Unit Bool)
                                                                                  }
                                                                                  (lam
                                                                                    n
                                                                                    (con integer)
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        [
                                                                                          lessThanEqInteger
                                                                                          (let
                                                                                            (nonrec
                                                                                            )
                                                                                            (termbind
                                                                                              (nonstrict
                                                                                              )
                                                                                              (vardecl
                                                                                                floatme
                                                                                                (con integer)
                                                                                              )
                                                                                              (let
                                                                                                (nonrec
                                                                                                )
                                                                                                (termbind
                                                                                                  (nonstrict
                                                                                                  )
                                                                                                  (vardecl
                                                                                                    wild
                                                                                                    Bool
                                                                                                  )
                                                                                                  [
                                                                                                    [
                                                                                                      greaterThanEqInteger
                                                                                                      ds
                                                                                                    ]
                                                                                                    (con
                                                                                                      integer
                                                                                                        0
                                                                                                    )
                                                                                                  ]
                                                                                                )
                                                                                                [
                                                                                                  [
                                                                                                    [
                                                                                                      {
                                                                                                        [
                                                                                                          Bool_match
                                                                                                          [
                                                                                                            [
                                                                                                              greaterThanEqInteger
                                                                                                              ds
                                                                                                            ]
                                                                                                            (con
                                                                                                              integer
                                                                                                                0
                                                                                                            )
                                                                                                          ]
                                                                                                        ]
                                                                                                        (fun Unit (con integer))
                                                                                                      }
                                                                                                      (lam
                                                                                                        thunk
                                                                                                        Unit
                                                                                                        n
                                                                                                      )
                                                                                                    ]
                                                                                                    (lam
                                                                                                      thunk
                                                                                                      Unit
                                                                                                      (con
                                                                                                        integer
                                                                                                          0
                                                                                                      )
                                                                                                    )
                                                                                                  ]
                                                                                                  Unit
                                                                                                ]
                                                                                              )
                                                                                            )
                                                                                            floatme
                                                                                          )
                                                                                        ]
                                                                                        ds
                                                                                      ]
                                                                                    )
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  keep
                                                                                )
                                                                              ]
                                                                              Unit
                                                                            ]
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

PassDeadCode

(let
  (nonrec)
  (datatypebind
    (datatype
      (tyvardecl Bool (type))

      Bool_match
      (vardecl True Bool) (vardecl False Bool)
    )
  )
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl lessThanEqInteger (fun (con integer) (fun (con integer) Bool)))
        (lam
          arg
          (con integer)
          (lam
            arg
            (con integer)
            [
              (lam
                b
                (con bool)
                [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
              )
              [ [ (builtin lessThanEqualsInteger) arg ] arg ]
            ]
          )
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl
            greaterThanEqInteger (fun (con integer) (fun (con integer) Bool))
          )
          (lam
            arg
            (con integer)
            (lam
              arg
              (con integer)
              [
                (lam
                  b
                  (con bool)
                  [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                )
                [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
              ]
            )
          )
        )
        (let
          (nonrec)
          (datatypebind
            (datatype
              (tyvardecl EndDate (type))

              EndDate_match
              (vardecl Fixed (fun (con integer) EndDate))
              (vardecl Never EndDate)
            )
          )
          (lam
            ds
            EndDate
            (lam
              ds
              (con integer)
              (let
                (nonrec)
                (termbind (nonstrict) (vardecl keep Bool) False)
                [
                  [
                    [
                      { [ EndDate_match ds ] (fun Unit Bool) }
                      (lam
                        n
                        (con integer)
                        (lam
                          thunk
                          Unit
                          [
                            [
                              lessThanEqInteger
                              (let
                                (nonrec)
                                (termbind
                                  (nonstrict)
                                  (vardecl floatme (con integer))
                                  [
                                    [
                                      [
                                        {
                                          [
                                            Bool_match
                                            [
                                              [ greaterThanEqInteger ds ]
                                              (con integer 0)
                                            ]
                                          ]
                                          (fun Unit (con integer))
                                        }
                                        (lam thunk Unit n)
                                      ]
                                      (lam thunk Unit (con integer 0))
                                    ]
                                    Unit
                                  ]
                                )
                                floatme
                              )
                            ]
                            ds
                          ]
                        )
                      )
                    ]
                    (lam thunk Unit keep)
                  ]
                  Unit
                ]
              )
            )
          )
        )
      )
    )
  )
)

PassInline [Name {nameString = "keep", nameUnique = Unique {unUnique = 77}}]

(let
  (nonrec)
  (datatypebind
    (datatype
      (tyvardecl Bool (type))

      Bool_match
      (vardecl True Bool) (vardecl False Bool)
    )
  )
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl lessThanEqInteger (fun (con integer) (fun (con integer) Bool)))
        (lam
          arg
          (con integer)
          (lam
            arg
            (con integer)
            [
              (lam
                b
                (con bool)
                [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
              )
              [ [ (builtin lessThanEqualsInteger) arg ] arg ]
            ]
          )
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl
            greaterThanEqInteger (fun (con integer) (fun (con integer) Bool))
          )
          (lam
            arg
            (con integer)
            (lam
              arg
              (con integer)
              [
                (lam
                  b
                  (con bool)
                  [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                )
                [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
              ]
            )
          )
        )
        (let
          (nonrec)
          (datatypebind
            (datatype
              (tyvardecl EndDate (type))

              EndDate_match
              (vardecl Fixed (fun (con integer) EndDate))
              (vardecl Never EndDate)
            )
          )
          (lam
            ds
            EndDate
            (lam
              ds
              (con integer)
              [
                [
                  [
                    { [ EndDate_match ds ] (fun Unit Bool) }
                    (lam
                      n
                      (con integer)
                      (lam
                        thunk
                        Unit
                        [
                          [
                            lessThanEqInteger
                            (let
                              (nonrec)
                              (termbind
                                (nonstrict)
                                (vardecl floatme (con integer))
                                [
                                  [
                                    [
                                      {
                                        [
                                          Bool_match
                                          [
                                            [ greaterThanEqInteger ds ]
                                            (con integer 0)
                                          ]
                                        ]
                                        (fun Unit (con integer))
                                      }
                                      (lam thunk Unit n)
                                    ]
                                    (lam thunk Unit (con integer 0))
                                  ]
                                  Unit
                                ]
                              )
                              floatme
                            )
                          ]
                          ds
                        ]
                      )
                    )
                  ]
                  (lam thunk Unit False)
                ]
                Unit
              ]
            )
          )
        )
      )
    )
  )
)

PassThunkRec

(let
  (nonrec)
  (datatypebind
    (datatype
      (tyvardecl Bool (type))

      Bool_match
      (vardecl True Bool) (vardecl False Bool)
    )
  )
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl lessThanEqInteger (fun (con integer) (fun (con integer) Bool)))
        (lam
          arg
          (con integer)
          (lam
            arg
            (con integer)
            [
              (lam
                b
                (con bool)
                [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
              )
              [ [ (builtin lessThanEqualsInteger) arg ] arg ]
            ]
          )
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl
            greaterThanEqInteger (fun (con integer) (fun (con integer) Bool))
          )
          (lam
            arg
            (con integer)
            (lam
              arg
              (con integer)
              [
                (lam
                  b
                  (con bool)
                  [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                )
                [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
              ]
            )
          )
        )
        (let
          (nonrec)
          (datatypebind
            (datatype
              (tyvardecl EndDate (type))

              EndDate_match
              (vardecl Fixed (fun (con integer) EndDate))
              (vardecl Never EndDate)
            )
          )
          (lam
            ds
            EndDate
            (lam
              ds
              (con integer)
              [
                [
                  [
                    { [ EndDate_match ds ] (fun Unit Bool) }
                    (lam
                      n
                      (con integer)
                      (lam
                        thunk
                        Unit
                        [
                          [
                            lessThanEqInteger
                            (let
                              (nonrec)
                              (termbind
                                (nonstrict)
                                (vardecl floatme (con integer))
                                [
                                  [
                                    [
                                      {
                                        [
                                          Bool_match
                                          [
                                            [ greaterThanEqInteger ds ]
                                            (con integer 0)
                                          ]
                                        ]
                                        (fun Unit (con integer))
                                      }
                                      (lam thunk Unit n)
                                    ]
                                    (lam thunk Unit (con integer 0))
                                  ]
                                  Unit
                                ]
                              )
                              floatme
                            )
                          ]
                          ds
                        ]
                      )
                    )
                  ]
                  (lam thunk Unit False)
                ]
                Unit
              ]
            )
          )
        )
      )
    )
  )
)

PassFloatTerm

(let
  (nonrec)
  (datatypebind
    (datatype
      (tyvardecl Bool (type))

      Bool_match
      (vardecl True Bool) (vardecl False Bool)
    )
  )
  (termbind
    (strict)
    (vardecl greaterThanEqInteger (fun (con integer) (fun (con integer) Bool)))
    (lam
      arg
      (con integer)
      (lam
        arg
        (con integer)
        [
          (lam
            b (con bool) [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
          )
          [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
        ]
      )
    )
  )
  (datatypebind
    (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
  )
  (datatypebind
    (datatype
      (tyvardecl EndDate (type))

      EndDate_match
      (vardecl Fixed (fun (con integer) EndDate)) (vardecl Never EndDate)
    )
  )
  (termbind
    (strict)
    (vardecl lessThanEqInteger (fun (con integer) (fun (con integer) Bool)))
    (lam
      arg
      (con integer)
      (lam
        arg
        (con integer)
        [
          (lam
            b (con bool) [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
          )
          [ [ (builtin lessThanEqualsInteger) arg ] arg ]
        ]
      )
    )
  )
  (lam
    ds
    EndDate
    (lam
      ds
      (con integer)
      [
        [
          [
            { [ EndDate_match ds ] (fun Unit Bool) }
            (lam
              n
              (con integer)
              (lam
                thunk
                Unit
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl floatme (con integer))
                    [
                      [
                        [
                          {
                            [
                              Bool_match
                              [ [ greaterThanEqInteger ds ] (con integer 0) ]
                            ]
                            (fun Unit (con integer))
                          }
                          (lam thunk Unit n)
                        ]
                        (lam thunk Unit (con integer 0))
                      ]
                      Unit
                    ]
                  )
                  [ [ lessThanEqInteger floatme ] ds ]
                )
              )
            )
          ]
          (lam thunk Unit False)
        ]
        Unit
      ]
    )
  )
)

PassLetNonStrict

(let
  (nonrec)
  (datatypebind
    (datatype
      (tyvardecl Bool (type))

      Bool_match
      (vardecl True Bool) (vardecl False Bool)
    )
  )
  (termbind
    (strict)
    (vardecl greaterThanEqInteger (fun (con integer) (fun (con integer) Bool)))
    (lam
      arg
      (con integer)
      (lam
        arg
        (con integer)
        [
          (lam
            b (con bool) [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
          )
          [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
        ]
      )
    )
  )
  (datatypebind
    (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
  )
  (datatypebind
    (datatype
      (tyvardecl EndDate (type))

      EndDate_match
      (vardecl Fixed (fun (con integer) EndDate)) (vardecl Never EndDate)
    )
  )
  (termbind
    (strict)
    (vardecl lessThanEqInteger (fun (con integer) (fun (con integer) Bool)))
    (lam
      arg
      (con integer)
      (lam
        arg
        (con integer)
        [
          (lam
            b (con bool) [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
          )
          [ [ (builtin lessThanEqualsInteger) arg ] arg ]
        ]
      )
    )
  )
  (lam
    ds
    EndDate
    (lam
      ds
      (con integer)
      [
        [
          [
            { [ EndDate_match ds ] (fun Unit Bool) }
            (lam
              n
              (con integer)
              (lam
                thunk
                Unit
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl
                      floatme (fun (all a (type) (fun a a)) (con integer))
                    )
                    (lam
                      arg
                      (all a (type) (fun a a))
                      [
                        [
                          [
                            {
                              [
                                Bool_match
                                [ [ greaterThanEqInteger ds ] (con integer 0) ]
                              ]
                              (fun Unit (con integer))
                            }
                            (lam thunk Unit n)
                          ]
                          (lam thunk Unit (con integer 0))
                        ]
                        Unit
                      ]
                    )
                  )
                  [
                    [ lessThanEqInteger [ floatme (abs a (type) (lam x a x)) ] ]
                    ds
                  ]
                )
              )
            )
          ]
          (lam thunk Unit False)
        ]
        Unit
      ]
    )
  )
)

PassLetTypes

[
  [
    [
      {
        (abs
          Bool
          (type)
          (lam
            True
            Bool
            (lam
              False
              Bool
              (lam
                Bool_match
                (fun Bool (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool))))
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl
                      greaterThanEqInteger
                      (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      arg
                      (con integer)
                      (lam
                        arg
                        (con integer)
                        [
                          (lam
                            b
                            (con bool)
                            [
                              [ [ { (builtin ifThenElse) Bool } b ] True ] False
                            ]
                          )
                          [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
                        ]
                      )
                    )
                  )
                  [
                    [
                      {
                        (abs
                          Unit
                          (type)
                          (lam
                            Unit
                            Unit
                            (lam
                              Unit_match
                              (fun Unit (all out_Unit (type) (fun out_Unit out_Unit)))
                              [
                                [
                                  [
                                    {
                                      (abs
                                        EndDate
                                        (type)
                                        (lam
                                          Fixed
                                          (fun (con integer) EndDate)
                                          (lam
                                            Never
                                            EndDate
                                            (lam
                                              EndDate_match
                                              (fun EndDate (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate))))
                                              (let
                                                (nonrec)
                                                (termbind
                                                  (strict)
                                                  (vardecl
                                                    lessThanEqInteger
                                                    (fun (con integer) (fun (con integer) Bool))
                                                  )
                                                  (lam
                                                    arg
                                                    (con integer)
                                                    (lam
                                                      arg
                                                      (con integer)
                                                      [
                                                        (lam
                                                          b
                                                          (con bool)
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    ifThenElse
                                                                  )
                                                                  Bool
                                                                }
                                                                b
                                                              ]
                                                              True
                                                            ]
                                                            False
                                                          ]
                                                        )
                                                        [
                                                          [
                                                            (builtin
                                                              lessThanEqualsInteger
                                                            )
                                                            arg
                                                          ]
                                                          arg
                                                        ]
                                                      ]
                                                    )
                                                  )
                                                )
                                                (lam
                                                  ds
                                                  EndDate
                                                  (lam
                                                    ds
                                                    (con integer)
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [ EndDate_match ds ]
                                                            (fun Unit Bool)
                                                          }
                                                          (lam
                                                            n
                                                            (con integer)
                                                            (lam
                                                              thunk
                                                              Unit
                                                              (let
                                                                (nonrec)
                                                                (termbind
                                                                  (strict)
                                                                  (vardecl
                                                                    floatme
                                                                    (fun (all a (type) (fun a a)) (con integer))
                                                                  )
                                                                  (lam
                                                                    arg
                                                                    (all a (type) (fun a a))
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Bool_match
                                                                              [
                                                                                [
                                                                                  greaterThanEqInteger
                                                                                  ds
                                                                                ]
                                                                                (con
                                                                                  integer
                                                                                    0
                                                                                )
                                                                              ]
                                                                            ]
                                                                            (fun Unit (con integer))
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            n
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          (con
                                                                            integer
                                                                              0
                                                                          )
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                                [
                                                                  [
                                                                    lessThanEqInteger
                                                                    [
                                                                      floatme
                                                                      (abs
                                                                        a
                                                                        (type)
                                                                        (lam
                                                                          x a x
                                                                        )
                                                                      )
                                                                    ]
                                                                  ]
                                                                  ds
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                        (lam thunk Unit False)
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                      (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate)))
                                    }
                                    (lam
                                      arg_0
                                      (con integer)
                                      (abs
                                        out_EndDate
                                        (type)
                                        (lam
                                          case_Fixed
                                          (fun (con integer) out_EndDate)
                                          (lam
                                            case_Never
                                            out_EndDate
                                            [ case_Fixed arg_0 ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                  (abs
                                    out_EndDate
                                    (type)
                                    (lam
                                      case_Fixed
                                      (fun (con integer) out_EndDate)
                                      (lam case_Never out_EndDate case_Never)
                                    )
                                  )
                                ]
                                (lam
                                  x
                                  (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate)))
                                  x
                                )
                              ]
                            )
                          )
                        )
                        (all out_Unit (type) (fun out_Unit out_Unit))
                      }
                      (abs out_Unit (type) (lam case_Unit out_Unit case_Unit))
                    ]
                    (lam x (all out_Unit (type) (fun out_Unit out_Unit)) x)
                  ]
                )
              )
            )
          )
        )
        (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool)))
      }
      (abs
        out_Bool
        (type)
        (lam case_True out_Bool (lam case_False out_Bool case_True))
      )
    ]
    (abs
      out_Bool
      (type)
      (lam case_True out_Bool (lam case_False out_Bool case_False))
    )
  ]
  (lam x (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool))) x)
]

PassLetRec

[
  [
    [
      {
        (abs
          Bool
          (type)
          (lam
            True
            Bool
            (lam
              False
              Bool
              (lam
                Bool_match
                (fun Bool (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool))))
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl
                      greaterThanEqInteger
                      (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      arg
                      (con integer)
                      (lam
                        arg
                        (con integer)
                        [
                          (lam
                            b
                            (con bool)
                            [
                              [ [ { (builtin ifThenElse) Bool } b ] True ] False
                            ]
                          )
                          [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
                        ]
                      )
                    )
                  )
                  [
                    [
                      {
                        (abs
                          Unit
                          (type)
                          (lam
                            Unit
                            Unit
                            (lam
                              Unit_match
                              (fun Unit (all out_Unit (type) (fun out_Unit out_Unit)))
                              [
                                [
                                  [
                                    {
                                      (abs
                                        EndDate
                                        (type)
                                        (lam
                                          Fixed
                                          (fun (con integer) EndDate)
                                          (lam
                                            Never
                                            EndDate
                                            (lam
                                              EndDate_match
                                              (fun EndDate (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate))))
                                              (let
                                                (nonrec)
                                                (termbind
                                                  (strict)
                                                  (vardecl
                                                    lessThanEqInteger
                                                    (fun (con integer) (fun (con integer) Bool))
                                                  )
                                                  (lam
                                                    arg
                                                    (con integer)
                                                    (lam
                                                      arg
                                                      (con integer)
                                                      [
                                                        (lam
                                                          b
                                                          (con bool)
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    ifThenElse
                                                                  )
                                                                  Bool
                                                                }
                                                                b
                                                              ]
                                                              True
                                                            ]
                                                            False
                                                          ]
                                                        )
                                                        [
                                                          [
                                                            (builtin
                                                              lessThanEqualsInteger
                                                            )
                                                            arg
                                                          ]
                                                          arg
                                                        ]
                                                      ]
                                                    )
                                                  )
                                                )
                                                (lam
                                                  ds
                                                  EndDate
                                                  (lam
                                                    ds
                                                    (con integer)
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [ EndDate_match ds ]
                                                            (fun Unit Bool)
                                                          }
                                                          (lam
                                                            n
                                                            (con integer)
                                                            (lam
                                                              thunk
                                                              Unit
                                                              (let
                                                                (nonrec)
                                                                (termbind
                                                                  (strict)
                                                                  (vardecl
                                                                    floatme
                                                                    (fun (all a (type) (fun a a)) (con integer))
                                                                  )
                                                                  (lam
                                                                    arg
                                                                    (all a (type) (fun a a))
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Bool_match
                                                                              [
                                                                                [
                                                                                  greaterThanEqInteger
                                                                                  ds
                                                                                ]
                                                                                (con
                                                                                  integer
                                                                                    0
                                                                                )
                                                                              ]
                                                                            ]
                                                                            (fun Unit (con integer))
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            n
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          (con
                                                                            integer
                                                                              0
                                                                          )
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                                [
                                                                  [
                                                                    lessThanEqInteger
                                                                    [
                                                                      floatme
                                                                      (abs
                                                                        a
                                                                        (type)
                                                                        (lam
                                                                          x a x
                                                                        )
                                                                      )
                                                                    ]
                                                                  ]
                                                                  ds
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                        (lam thunk Unit False)
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                      (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate)))
                                    }
                                    (lam
                                      arg_0
                                      (con integer)
                                      (abs
                                        out_EndDate
                                        (type)
                                        (lam
                                          case_Fixed
                                          (fun (con integer) out_EndDate)
                                          (lam
                                            case_Never
                                            out_EndDate
                                            [ case_Fixed arg_0 ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                  (abs
                                    out_EndDate
                                    (type)
                                    (lam
                                      case_Fixed
                                      (fun (con integer) out_EndDate)
                                      (lam case_Never out_EndDate case_Never)
                                    )
                                  )
                                ]
                                (lam
                                  x
                                  (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate)))
                                  x
                                )
                              ]
                            )
                          )
                        )
                        (all out_Unit (type) (fun out_Unit out_Unit))
                      }
                      (abs out_Unit (type) (lam case_Unit out_Unit case_Unit))
                    ]
                    (lam x (all out_Unit (type) (fun out_Unit out_Unit)) x)
                  ]
                )
              )
            )
          )
        )
        (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool)))
      }
      (abs
        out_Bool
        (type)
        (lam case_True out_Bool (lam case_False out_Bool case_True))
      )
    ]
    (abs
      out_Bool
      (type)
      (lam case_True out_Bool (lam case_False out_Bool case_False))
    )
  ]
  (lam x (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool))) x)
]

PassDeadCode

[
  [
    [
      {
        (abs
          Bool
          (type)
          (lam
            True
            Bool
            (lam
              False
              Bool
              (lam
                Bool_match
                (fun Bool (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool))))
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl
                      greaterThanEqInteger
                      (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      arg
                      (con integer)
                      (lam
                        arg
                        (con integer)
                        [
                          (lam
                            b
                            (con bool)
                            [
                              [ [ { (builtin ifThenElse) Bool } b ] True ] False
                            ]
                          )
                          [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
                        ]
                      )
                    )
                  )
                  [
                    [
                      {
                        (abs
                          Unit
                          (type)
                          (lam
                            Unit
                            Unit
                            (lam
                              Unit_match
                              (fun Unit (all out_Unit (type) (fun out_Unit out_Unit)))
                              [
                                [
                                  [
                                    {
                                      (abs
                                        EndDate
                                        (type)
                                        (lam
                                          Fixed
                                          (fun (con integer) EndDate)
                                          (lam
                                            Never
                                            EndDate
                                            (lam
                                              EndDate_match
                                              (fun EndDate (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate))))
                                              (let
                                                (nonrec)
                                                (termbind
                                                  (strict)
                                                  (vardecl
                                                    lessThanEqInteger
                                                    (fun (con integer) (fun (con integer) Bool))
                                                  )
                                                  (lam
                                                    arg
                                                    (con integer)
                                                    (lam
                                                      arg
                                                      (con integer)
                                                      [
                                                        (lam
                                                          b
                                                          (con bool)
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    ifThenElse
                                                                  )
                                                                  Bool
                                                                }
                                                                b
                                                              ]
                                                              True
                                                            ]
                                                            False
                                                          ]
                                                        )
                                                        [
                                                          [
                                                            (builtin
                                                              lessThanEqualsInteger
                                                            )
                                                            arg
                                                          ]
                                                          arg
                                                        ]
                                                      ]
                                                    )
                                                  )
                                                )
                                                (lam
                                                  ds
                                                  EndDate
                                                  (lam
                                                    ds
                                                    (con integer)
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [ EndDate_match ds ]
                                                            (fun Unit Bool)
                                                          }
                                                          (lam
                                                            n
                                                            (con integer)
                                                            (lam
                                                              thunk
                                                              Unit
                                                              (let
                                                                (nonrec)
                                                                (termbind
                                                                  (strict)
                                                                  (vardecl
                                                                    floatme
                                                                    (fun (all a (type) (fun a a)) (con integer))
                                                                  )
                                                                  (lam
                                                                    arg
                                                                    (all a (type) (fun a a))
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Bool_match
                                                                              [
                                                                                [
                                                                                  greaterThanEqInteger
                                                                                  ds
                                                                                ]
                                                                                (con
                                                                                  integer
                                                                                    0
                                                                                )
                                                                              ]
                                                                            ]
                                                                            (fun Unit (con integer))
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            n
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          (con
                                                                            integer
                                                                              0
                                                                          )
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                                [
                                                                  [
                                                                    lessThanEqInteger
                                                                    [
                                                                      floatme
                                                                      (abs
                                                                        a
                                                                        (type)
                                                                        (lam
                                                                          x a x
                                                                        )
                                                                      )
                                                                    ]
                                                                  ]
                                                                  ds
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                        (lam thunk Unit False)
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                      (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate)))
                                    }
                                    (lam
                                      arg_0
                                      (con integer)
                                      (abs
                                        out_EndDate
                                        (type)
                                        (lam
                                          case_Fixed
                                          (fun (con integer) out_EndDate)
                                          (lam
                                            case_Never
                                            out_EndDate
                                            [ case_Fixed arg_0 ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                  (abs
                                    out_EndDate
                                    (type)
                                    (lam
                                      case_Fixed
                                      (fun (con integer) out_EndDate)
                                      (lam case_Never out_EndDate case_Never)
                                    )
                                  )
                                ]
                                (lam
                                  x
                                  (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate)))
                                  x
                                )
                              ]
                            )
                          )
                        )
                        (all out_Unit (type) (fun out_Unit out_Unit))
                      }
                      (abs out_Unit (type) (lam case_Unit out_Unit case_Unit))
                    ]
                    (lam x (all out_Unit (type) (fun out_Unit out_Unit)) x)
                  ]
                )
              )
            )
          )
        )
        (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool)))
      }
      (abs
        out_Bool
        (type)
        (lam case_True out_Bool (lam case_False out_Bool case_True))
      )
    ]
    (abs
      out_Bool
      (type)
      (lam case_True out_Bool (lam case_False out_Bool case_False))
    )
  ]
  (lam x (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool))) x)
]

PassInline []

[
  [
    [
      {
        (abs
          Bool
          (type)
          (lam
            True
            Bool
            (lam
              False
              Bool
              (lam
                Bool_match
                (fun Bool (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool))))
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl
                      greaterThanEqInteger
                      (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      arg
                      (con integer)
                      (lam
                        arg
                        (con integer)
                        [
                          (lam
                            b
                            (con bool)
                            [
                              [ [ { (builtin ifThenElse) Bool } b ] True ] False
                            ]
                          )
                          [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
                        ]
                      )
                    )
                  )
                  [
                    [
                      {
                        (abs
                          Unit
                          (type)
                          (lam
                            Unit
                            Unit
                            (lam
                              Unit_match
                              (fun Unit (all out_Unit (type) (fun out_Unit out_Unit)))
                              [
                                [
                                  [
                                    {
                                      (abs
                                        EndDate
                                        (type)
                                        (lam
                                          Fixed
                                          (fun (con integer) EndDate)
                                          (lam
                                            Never
                                            EndDate
                                            (lam
                                              EndDate_match
                                              (fun EndDate (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate))))
                                              (let
                                                (nonrec)
                                                (termbind
                                                  (strict)
                                                  (vardecl
                                                    lessThanEqInteger
                                                    (fun (con integer) (fun (con integer) Bool))
                                                  )
                                                  (lam
                                                    arg
                                                    (con integer)
                                                    (lam
                                                      arg
                                                      (con integer)
                                                      [
                                                        (lam
                                                          b
                                                          (con bool)
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    ifThenElse
                                                                  )
                                                                  Bool
                                                                }
                                                                b
                                                              ]
                                                              True
                                                            ]
                                                            False
                                                          ]
                                                        )
                                                        [
                                                          [
                                                            (builtin
                                                              lessThanEqualsInteger
                                                            )
                                                            arg
                                                          ]
                                                          arg
                                                        ]
                                                      ]
                                                    )
                                                  )
                                                )
                                                (lam
                                                  ds
                                                  EndDate
                                                  (lam
                                                    ds
                                                    (con integer)
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [ EndDate_match ds ]
                                                            (fun Unit Bool)
                                                          }
                                                          (lam
                                                            n
                                                            (con integer)
                                                            (lam
                                                              thunk
                                                              Unit
                                                              (let
                                                                (nonrec)
                                                                (termbind
                                                                  (strict)
                                                                  (vardecl
                                                                    floatme
                                                                    (fun (all a (type) (fun a a)) (con integer))
                                                                  )
                                                                  (lam
                                                                    arg
                                                                    (all a (type) (fun a a))
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Bool_match
                                                                              [
                                                                                [
                                                                                  greaterThanEqInteger
                                                                                  ds
                                                                                ]
                                                                                (con
                                                                                  integer
                                                                                    0
                                                                                )
                                                                              ]
                                                                            ]
                                                                            (fun Unit (con integer))
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            n
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          (con
                                                                            integer
                                                                              0
                                                                          )
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                                [
                                                                  [
                                                                    lessThanEqInteger
                                                                    [
                                                                      floatme
                                                                      (abs
                                                                        a
                                                                        (type)
                                                                        (lam
                                                                          x a x
                                                                        )
                                                                      )
                                                                    ]
                                                                  ]
                                                                  ds
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                        (lam thunk Unit False)
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                      (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate)))
                                    }
                                    (lam
                                      arg_0
                                      (con integer)
                                      (abs
                                        out_EndDate
                                        (type)
                                        (lam
                                          case_Fixed
                                          (fun (con integer) out_EndDate)
                                          (lam
                                            case_Never
                                            out_EndDate
                                            [ case_Fixed arg_0 ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                  (abs
                                    out_EndDate
                                    (type)
                                    (lam
                                      case_Fixed
                                      (fun (con integer) out_EndDate)
                                      (lam case_Never out_EndDate case_Never)
                                    )
                                  )
                                ]
                                (lam
                                  x
                                  (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate)))
                                  x
                                )
                              ]
                            )
                          )
                        )
                        (all out_Unit (type) (fun out_Unit out_Unit))
                      }
                      (abs out_Unit (type) (lam case_Unit out_Unit case_Unit))
                    ]
                    (lam x (all out_Unit (type) (fun out_Unit out_Unit)) x)
                  ]
                )
              )
            )
          )
        )
        (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool)))
      }
      (abs
        out_Bool
        (type)
        (lam case_True out_Bool (lam case_False out_Bool case_True))
      )
    ]
    (abs
      out_Bool
      (type)
      (lam case_True out_Bool (lam case_False out_Bool case_False))
    )
  ]
  (lam x (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool))) x)
]

PassLetNonRec

[
  [
    [
      {
        (abs
          Bool
          (type)
          (lam
            True
            Bool
            (lam
              False
              Bool
              (lam
                Bool_match
                (fun Bool (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool))))
                [
                  (lam
                    greaterThanEqInteger
                    (fun (con integer) (fun (con integer) Bool))
                    [
                      [
                        {
                          (abs
                            Unit
                            (type)
                            (lam
                              Unit
                              Unit
                              (lam
                                Unit_match
                                (fun Unit (all out_Unit (type) (fun out_Unit out_Unit)))
                                [
                                  [
                                    [
                                      {
                                        (abs
                                          EndDate
                                          (type)
                                          (lam
                                            Fixed
                                            (fun (con integer) EndDate)
                                            (lam
                                              Never
                                              EndDate
                                              (lam
                                                EndDate_match
                                                (fun EndDate (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate))))
                                                [
                                                  (lam
                                                    lessThanEqInteger
                                                    (fun (con integer) (fun (con integer) Bool))
                                                    (lam
                                                      ds
                                                      EndDate
                                                      (lam
                                                        ds
                                                        (con integer)
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  EndDate_match
                                                                  ds
                                                                ]
                                                                (fun Unit Bool)
                                                              }
                                                              (lam
                                                                n
                                                                (con integer)
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    (lam
                                                                      floatme
                                                                      (fun (all a (type) (fun a a)) (con integer))
                                                                      [
                                                                        [
                                                                          lessThanEqInteger
                                                                          [
                                                                            floatme
                                                                            (abs
                                                                              a
                                                                              (type)
                                                                              (lam
                                                                                x
                                                                                a
                                                                                x
                                                                              )
                                                                            )
                                                                          ]
                                                                        ]
                                                                        ds
                                                                      ]
                                                                    )
                                                                    (lam
                                                                      arg
                                                                      (all a (type) (fun a a))
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                Bool_match
                                                                                [
                                                                                  [
                                                                                    greaterThanEqInteger
                                                                                    ds
                                                                                  ]
                                                                                  (con
                                                                                    integer
                                                                                      0
                                                                                  )
                                                                                ]
                                                                              ]
                                                                              (fun Unit (con integer))
                                                                            }
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              n
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            (con
                                                                              integer
                                                                                0
                                                                            )
                                                                          )
                                                                        ]
                                                                        Unit
                                                                      ]
                                                                    )
                                                                  ]
                                                                )
                                                              )
                                                            ]
                                                            (lam
                                                              thunk Unit False
                                                            )
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    )
                                                  )
                                                  (lam
                                                    arg
                                                    (con integer)
                                                    (lam
                                                      arg
                                                      (con integer)
                                                      [
                                                        (lam
                                                          b
                                                          (con bool)
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    ifThenElse
                                                                  )
                                                                  Bool
                                                                }
                                                                b
                                                              ]
                                                              True
                                                            ]
                                                            False
                                                          ]
                                                        )
                                                        [
                                                          [
                                                            (builtin
                                                              lessThanEqualsInteger
                                                            )
                                                            arg
                                                          ]
                                                          arg
                                                        ]
                                                      ]
                                                    )
                                                  )
                                                ]
                                              )
                                            )
                                          )
                                        )
                                        (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate)))
                                      }
                                      (lam
                                        arg_0
                                        (con integer)
                                        (abs
                                          out_EndDate
                                          (type)
                                          (lam
                                            case_Fixed
                                            (fun (con integer) out_EndDate)
                                            (lam
                                              case_Never
                                              out_EndDate
                                              [ case_Fixed arg_0 ]
                                            )
                                          )
                                        )
                                      )
                                    ]
                                    (abs
                                      out_EndDate
                                      (type)
                                      (lam
                                        case_Fixed
                                        (fun (con integer) out_EndDate)
                                        (lam case_Never out_EndDate case_Never)
                                      )
                                    )
                                  ]
                                  (lam
                                    x
                                    (all out_EndDate (type) (fun (fun (con integer) out_EndDate) (fun out_EndDate out_EndDate)))
                                    x
                                  )
                                ]
                              )
                            )
                          )
                          (all out_Unit (type) (fun out_Unit out_Unit))
                        }
                        (abs out_Unit (type) (lam case_Unit out_Unit case_Unit))
                      ]
                      (lam x (all out_Unit (type) (fun out_Unit out_Unit)) x)
                    ]
                  )
                  (lam
                    arg
                    (con integer)
                    (lam
                      arg
                      (con integer)
                      [
                        (lam
                          b
                          (con bool)
                          [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                        )
                        [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
                      ]
                    )
                  )
                ]
              )
            )
          )
        )
        (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool)))
      }
      (abs
        out_Bool
        (type)
        (lam case_True out_Bool (lam case_False out_Bool case_True))
      )
    ]
    (abs
      out_Bool
      (type)
      (lam case_True out_Bool (lam case_False out_Bool case_False))
    )
  ]
  (lam x (all out_Bool (type) (fun out_Bool (fun out_Bool out_Bool))) x)
]
